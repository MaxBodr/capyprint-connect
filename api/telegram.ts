export const config = {
  runtime: 'edge', // –∏–ª–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω Edge Runtime
};

export default async function handler(req: Request) {
  try {
    const body = await req.json();

    const { company, name, contact } = body;

    const mainMessage = `
üì¨ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ CapyPrint</b>
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${company || '‚Äì'}
üë§ <b>–ò–º—è:</b> ${name || '‚Äì'}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${contact || '‚Äì'}
`;

    const fallbackMessage = `
‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏</b>
üì§ <b>–î–∞–Ω–Ω—ã–µ:</b>
<pre>${JSON.stringify({ company, name, contact }, null, 2)}</pre>
`;

    const sendToTelegram = async (text: string) => {
      return await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: process.env.TELEGRAM_CHAT_ID,
          text,
          parse_mode: 'HTML'
        }),
      });
    };

    const response = await sendToTelegram(mainMessage);
    const data = await response.json();

    if (!data.ok) {
      await sendToTelegram(fallbackMessage);
      return new Response(JSON.stringify({ error: '–û—à–∏–±–∫–∞ Telegram', details: data }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' },
    });

  } catch (error) {
    const fallbackMessage = `
‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞</b>
<pre>${String(error)}</pre>
    `;
    await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: process.env.TELEGRAM_CHAT_ID,
        text: fallbackMessage,
        parse_mode: 'HTML',
      }),
    });

    return new Response(JSON.stringify({ error: 'Server error', details: String(error) }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}

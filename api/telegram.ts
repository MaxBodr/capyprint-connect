export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω' });
  }

  const { company, name, contact } = req.body || {};

  const mainMessage = `
üì¨ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ CapyPrint</b>
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${company || '‚Äì'}
üë§ <b>–ò–º—è:</b> ${name || '‚Äì'}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${contact || '‚Äì'}
`;

  const fallbackMessage = `
‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏</b>
üì§ <b>–î–∞–Ω–Ω—ã–µ:</b>
<pre>${JSON.stringify({ company, name, contact }, null, 2)}</pre>
`;

  const sendToTelegram = async (text: string) => {
    return await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: process.env.TELEGRAM_CHAT_ID,
        text,
        parse_mode: 'HTML'
      }),
    });
  };

  try {
    // –û—Å–Ω–æ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
    const response = await sendToTelegram(mainMessage);
    const data = await response.json();

    if (!data.ok) {
      // –ï—Å–ª–∏ Telegram –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤–∞—Ä–∏–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await sendToTelegram(fallbackMessage);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram', details: data });
    }

    return res.status(200).json({ success: true });
  } catch (err) {
    // –õ–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ try/catch
    await sendToTelegram(fallbackMessage);
    return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: String(err) });
  }
}

export const config = {
  runtime: 'edge', // –∏–ª–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω Edge Runtime
};

export default async function handler(req: Request) {
  try {
    if (req.method !== 'POST') {
      return new Response(JSON.stringify({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω' }), {
        status: 405,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    const body = await req.json();
    const { company, name, contact } = body;

    const mainMessage = `
üì¨ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ CapyPrint</b>
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${company || '‚Äì'}
üë§ <b>–ò–º—è:</b> ${name || '‚Äì'}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${contact || '‚Äì'}
`;

    const fallbackMessage = `
‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏</b>
üì§ <b>–î–∞–Ω–Ω—ã–µ:</b>
<pre>${JSON.stringify({ company, name, contact }, null, 2)}</pre>
`;

    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID_1 = process.env.TELEGRAM_CHAT_ID;
    const CHAT_ID_2 = process.env.TELEGRAM_CHAT_ID_2;

    const sendToTelegram = async (chatId: string, text: string) => {
      return await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text,
          parse_mode: 'HTML'
        }),
      });
    };

    // –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ–±–∞ —á–∞—Ç–∞
    const send1 = sendToTelegram(CHAT_ID_1!, mainMessage);
    const send2 = CHAT_ID_2 ? sendToTelegram(CHAT_ID_2, mainMessage) : null;

    const [response1, response2] = await Promise.all([send1, send2]);

    const data1 = await response1.json();

    if (!data1.ok) {
      // –µ—Å–ª–∏ –¥–∞–∂–µ –ø–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —á–∞—Ç
      await sendToTelegram(CHAT_ID_1!, fallbackMessage);

      return new Response(JSON.stringify({ error: '–û—à–∏–±–∫–∞ Telegram', details: data1 }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { 'Content-Type': 'application/json' },
    });

  } catch (error) {
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID_1 = process.env.TELEGRAM_CHAT_ID;

    const fallbackErrorMessage = `
üí• <b>–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è serverless-—Ñ—É–Ω–∫—Ü–∏–∏</b>
<pre>${String(error)}</pre>
    `;

    if (BOT_TOKEN && CHAT_ID_1) {
      await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: CHAT_ID_1,
          text: fallbackErrorMessage,
          parse_mode: 'HTML'
        }),
      });
    }

    return new Response(JSON.stringify({ error: 'Server error', details: String(error) }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}

